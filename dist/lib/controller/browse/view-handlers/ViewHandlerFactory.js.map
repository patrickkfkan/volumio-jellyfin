{"version":3,"file":"ViewHandlerFactory.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/ViewHandlerFactory.ts"],"names":[],"mappings":";;;;;AAAA,8FAAsE;AAEtE,0EAAkD;AAClD,4EAAoD;AAEpD,oFAA4D;AAC5D,8FAAsE;AACtE,4EAAoD;AACpD,0EAAkD;AAClD,8EAAsD;AACtD,gFAAwD;AACxD,wEAAgD;AAEhD,8DAAsC;AACtC,gFAAwD;AACxD,wEAAgD;AAChD,sFAA8D;AAC9D,8EAAsD;AAKtD,MAAM,kBAAkB,GAA2C;IACjE,MAAM,EAAE,yBAAe;IACvB,WAAW,EAAE,6BAAmB;IAChC,SAAS,EAAE,4BAAkB;IAC7B,QAAQ,EAAE,0BAAgB;IAC1B,cAAc,EAAE,2BAAiB;IACjC,SAAS,EAAE,2BAAiB;IAC5B,WAAW,EAAE,6BAAmB;IAChC,QAAQ,EAAE,0BAAgB;IAC1B,OAAO,EAAE,yBAAe;IACxB,MAAM,EAAE,yBAAe;IACvB,aAAa,EAAE,gCAAsB;IACrC,YAAY,EAAE,+BAAqB;IACnC,QAAQ,EAAE,2BAAiB;IAC3B,WAAW,EAAE,oCAA0B;IACvC,cAAc,EAAE,oCAA0B;IAC1C,aAAa,EAAE,oCAA0B;IACzC,eAAe,EAAE,oCAA0B;IAC3C,aAAa,EAAE,oCAA0B;CAC1C,CAAC;AAEF,MAAqB,kBAAkB;IAIrC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAiB,GAAW,EAAE,gBAAsD;QACzG,MAAM,KAAK,GAAG,oBAAU,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC9C,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAChC,MAAM,aAAa,GAAG,KAAK,CAAC;QAE5B,IAAI,CAAC,WAAW,EAAE;YAChB,MAAM,KAAK,CAAC,iCAAiC,CAAC,CAAC;SAChD;QAED,IAAI,UAAU,GAA4B,IAAI,CAAC;QAC/C,IAAI,WAAW,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,EAAE;YAChD,IAAI,gBAAgB,YAAY,2BAAiB,EAAE;gBACjD,MAAM,YAAY,GAAG,sBAAY,CAAC,8BAA8B,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC;gBAC7G,IAAI,CAAC,YAAY,EAAE;oBACjB,MAAM,KAAK,CAAC,oBAAoB,CAAC,CAAC;iBACnC;gBACD,UAAU,GAAG,MAAM,gBAAgB,CAAC,0BAA0B,CAC5D,YAAY,EAAE,WAAW,CAAC,QAAQ,EAAE,sBAAY,CAAC,uBAAuB,CAAC,IAAI,CAAC,sBAAY,CAAC,CAAC,CAAC;aAChG;iBACI;gBACH,UAAU,GAAG,gBAAgB,CAAC;aAC/B;SACF;QAED,OAAO,IAAI,kBAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,WAAW,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;IAC/F,CAAC;CACF;AA9BD,qCA8BC","sourcesContent":["import ConnectionManager from '../../../connection/ConnectionManager';\nimport ServerConnection from '../../../connection/ServerConnection';\nimport AlbumViewHandler from './AlbumViewHandler';\nimport ArtistViewHandler from './ArtistViewHandler';\nimport BaseViewHandler from './BaseViewHandler';\nimport CollectionViewHandler from './CollectionViewHandler';\nimport FilterSelectionViewHandler from './FilterSelectionViewHandler';\nimport FolderViewHandler from './FolderViewHandler';\nimport GenreViewHandler from './GenreViewHandler';\nimport LibraryViewHandler from './LibraryViewHandler';\nimport PlaylistViewHandler from './PlaylistViewHandler';\nimport RootViewHandler from './RootViewHandler';\nimport View from './View';\nimport ViewHelper from './ViewHelper';\nimport UserViewViewHandler from './UserViewViewHandler';\nimport SongViewHandler from './SongViewHandler';\nimport CollectionsViewHandler from './CollectionsViewHandler';\nimport ServerHelper from '../../../util/ServerHelper';\n\ntype HandlerClass<V extends View, T extends BaseViewHandler<V>> =\n  new (uri: string, currentView: V, previousViews: View[], connection: ServerConnection | null) => T;\n\nconst VIEW_NAME_TO_CLASS: Record<string, HandlerClass<any, any>> = {\n  'root': RootViewHandler,\n  'userViews': UserViewViewHandler,\n  'library': LibraryViewHandler,\n  'albums': AlbumViewHandler,\n  'albumArtists': ArtistViewHandler,\n  'artists': ArtistViewHandler,\n  'playlists': PlaylistViewHandler,\n  'genres': GenreViewHandler,\n  'songs': SongViewHandler,\n  'song': SongViewHandler,\n  'collections': CollectionsViewHandler,\n  'collection': CollectionViewHandler,\n  'folder': FolderViewHandler,\n  'filter.az': FilterSelectionViewHandler,\n  'filter.genre': FilterSelectionViewHandler,\n  'filter.year': FilterSelectionViewHandler,\n  'filter.filter': FilterSelectionViewHandler,\n  'filter.sort': FilterSelectionViewHandler\n};\n\nexport default class ViewHandlerFactory {\n\n  static async getHandler<V extends View>(uri: string, connection: ServerConnection): Promise<BaseViewHandler<V>>;\n  static async getHandler<V extends View>(uri: string, connectionManager: ConnectionManager): Promise<BaseViewHandler<V>>;\n  static async getHandler<V extends View>(uri: string, connectionTarget: ConnectionManager | ServerConnection): Promise<BaseViewHandler<V>> {\n    const views = ViewHelper.getViewsFromUri(uri);\n    const currentView = views.pop();\n    const previousViews = views;\n\n    if (!currentView) {\n      throw Error('Invalid URI: no parseable view.');\n    }\n\n    let connection: ServerConnection | null = null;\n    if (currentView.serverId && currentView.username) {\n      if (connectionTarget instanceof ConnectionManager) {\n        const targetServer = ServerHelper.getOnlineServerByIdAndUsername(currentView.serverId, currentView.username);\n        if (!targetServer) {\n          throw Error('Server unavailable');\n        }\n        connection = await connectionTarget.getAuthenticatedConnection(\n          targetServer, currentView.username, ServerHelper.fetchPasswordFromConfig.bind(ServerHelper));\n      }\n      else {\n        connection = connectionTarget;\n      }\n    }\n\n    return new VIEW_NAME_TO_CLASS[currentView.name](uri, currentView, previousViews, connection);\n  }\n}\n"]}